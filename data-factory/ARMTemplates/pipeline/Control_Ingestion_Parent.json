{
	"name": "Control_Ingestion_Parent",
	"properties": {
		"activities": [
			{
				"name": "List Source Folders",
				"description": "discovers the source directories (park-data, squirrel-data, visitor-log) without naming them.",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_Bronze_Root",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEach Source Folder",
				"description": "process each source in isolationâ€”simplifies logging and error handling.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Filter Folders",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Filter Folders').output.Value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 1,
					"activities": [
						{
							"name": "Run ProcessFilder Pipeline",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Control_Ingestion_ProcessFolder",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"param_folderName": {
										"value": "@item().name",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Filter Folders",
				"description": "ChildItems returns both files and folders; we only want folders at this level.",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "List Source Folders",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('List Source Folders').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type, 'Folder')",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"var_DEBUG": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Control"
		},
		"annotations": []
	}
}