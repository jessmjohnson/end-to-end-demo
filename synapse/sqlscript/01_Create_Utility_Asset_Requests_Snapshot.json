{
	"name": "01_Create_Utility_Asset_Requests_Snapshot",
	"properties": {
		"content": {
			"query": "/*****************************************************************************************/\n/** Requests_Snapshot                                                                   **/\n/**     What:   Captures summary metrics of in-flight requests (total count, average    **/\n/**             and max execution time).                                                **/\n/**                                                                                     **/\n/**     Why:    Tracks concurrency and request-duration trends over time, helping       **/\n/**             identify spikes in workload or runaway queries.                         **/\n/*****************************************************************************************/\n\n-------------------------------------------------------------------------------------------\n--  Table Design: Telemetry.Requests_Snapshot \n-------------------------------------------------------------------------------------------\nCREATE TABLE Telemetry.Requests_Snapshot\n(\n  CaptureTime   DATETIME2 NOT NULL,\n  TotalRequests BIGINT    NOT NULL,\n  AvgElapsedMs  FLOAT     NULL,\n  MaxElapsedMs  FLOAT     NULL\n)\nWITH\n(\n  DISTRIBUTION = ROUND_ROBIN\n);\nGO\n\nALTER TABLE Telemetry.Requests_Snapshot\nADD CONSTRAINT PK_Requests_Snapshot\n  PRIMARY KEY NONCLUSTERED (CaptureTime)\n  NOT ENFORCED;\nGO\n\n-------------------------------------------------------------------------------------------\n--  Stored Procedure Design: Telemetry.Requests_Snapshot \n-------------------------------------------------------------------------------------------\nCREATE PROCEDURE Telemetry.usp_CaptureRequestsSnapshot\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    DECLARE @now DATETIME2 = SYSUTCDATETIME();\n\n    INSERT INTO Telemetry.Requests_Snapshot\n        (CaptureTime, TotalRequests, AvgElapsedMs, MaxElapsedMs)\n    SELECT\n        @now,\n        COUNT_BIG(*) AS TotalRequests,\n        AVG(CAST(total_elapsed_time AS FLOAT) / 1000.0) AS AvgElapsedMs,  -- µs → ms\n        MAX(CAST(total_elapsed_time AS FLOAT) / 1000.0) AS MaxElapsedMs\n    FROM sys.dm_pdw_requests\n    WHERE\n        status IN ('Running','Suspended','Pending')\n        OR (status = 'Completed' AND start_time >= DATEADD(minute, -1, @now));\nEND;\nGO\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dspendtoenddemo",
				"poolName": "dspendtoenddemo"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}