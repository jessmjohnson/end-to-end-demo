{
	"name": "SQL script 20",
	"properties": {
		"content": {
			"query": "--DROP PROCEDURE Gold.usp_PopulateDimDate\nCREATE PROCEDURE Gold.usp_PopulateDimDate\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n    ----------------------------------------------------------------\n    -- 1) Declare & set your date bounds and span\n    ----------------------------------------------------------------\n    DECLARE \n        @StartDate DATE,\n        @EndDate   DATE,\n        @Days      INT;\n\n    SET @StartDate = '1950-01-01';\n    SET @EndDate   = '2050-12-31';\n    SET @Days      = DATEDIFF(DAY, @StartDate, @EndDate);\n\n    ----------------------------------------------------------------\n    -- 2) Empty the dimension\n    ----------------------------------------------------------------\n    TRUNCATE TABLE Gold.dimDate;\n\n    ----------------------------------------------------------------\n    -- 3) Build a 65K+ tally table and generate all dates set‑based\n    ----------------------------------------------------------------\n    ;WITH\n    E1  AS (SELECT 1 AS n UNION ALL SELECT 1),\n    E2  AS (SELECT 1 AS n FROM E1 a CROSS JOIN E1 b),     -- 4 rows\n    E4  AS (SELECT 1 AS n FROM E2 a CROSS JOIN E2 b),     -- 16\n    E8  AS (SELECT 1 AS n FROM E4 a CROSS JOIN E4 b),     -- 256\n    E16 AS (SELECT 1 AS n FROM E8 a CROSS JOIN E8 b),     -- 65,536\n    nums AS (\n      SELECT TOP (@Days + 1)\n        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS DayOffset\n      FROM E16\n    ),\n    Calendar AS (\n      SELECT DATEADD(DAY, DayOffset, @StartDate) AS d\n      FROM nums\n    )\n\n    ----------------------------------------------------------------\n    -- 4) Bulk‑insert 1950‑2050\n    ----------------------------------------------------------------\n    INSERT INTO Gold.dimDate\n    (\n        DateKey,\n        FullDate,\n        DayOfWeek,\n        DayName,\n        DayOfMonth,\n        DayOfYear,\n        WeekOfYear,\n        MonthOfYear,\n        MonthName,\n        Quarter,\n        QuarterName,\n        [Year],\n        IsWeekend\n    )\n    SELECT\n        YEAR(d)*10000 + MONTH(d)*100 + DAY(d)            AS DateKey,\n        d                                               AS FullDate,\n        DATEPART(WEEKDAY, d)                            AS DayOfWeek,\n        DATENAME(WEEKDAY, d)                            AS DayName,\n        DAY(d)                                          AS DayOfMonth,\n        DATEPART(DAYOFYEAR, d)                          AS DayOfYear,\n        DATEPART(WEEK, d)                               AS WeekOfYear,\n        MONTH(d)                                        AS MonthOfYear,\n        DATENAME(MONTH, d)                              AS MonthName,\n        DATEPART(QUARTER, d)                            AS Quarter,\n        'Q' + CONVERT(VARCHAR(1), DATEPART(QUARTER, d)) AS QuarterName,\n        YEAR(d)                                         AS [Year],\n        CASE WHEN DATEPART(WEEKDAY, d) IN (1,7) THEN 1 ELSE 0 END\n                                                       AS IsWeekend\n    FROM Calendar;\n\n    ----------------------------------------------------------------\n    -- 5) Append the fixed 1900‑01‑01 row using *only* literals\n    ----------------------------------------------------------------\n    INSERT INTO Gold.dimDate\n    (\n        DateKey,\n        FullDate,\n        DayOfWeek,\n        DayName,\n        DayOfMonth,\n        DayOfYear,\n        WeekOfYear,\n        MonthOfYear,\n        MonthName,\n        Quarter,\n        QuarterName,\n        [Year],\n        IsWeekend\n    )\n    VALUES\n    (\n        19000101,      -- YYYYMDD\n        '1900-01-01',  -- FullDate\n        2,             -- Monday (1=Sunday→2=Monday)\n        'Monday',\n        1,\n        1,\n        1,\n        1,\n        'January',\n        1,\n        'Q1',\n        1900,\n        0\n    );\nEND;\nGO\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "dspendtoenddemo",
				"poolName": "dspendtoenddemo"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}